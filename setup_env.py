#!/usr/bin/env python3
"""
Helper script to set up the .env file for the Stock Performance Analyzer.
This script guides users through creating the required environment variables.
"""

import os
import sys

def create_env_file():
    """Create .env file with user input"""
    print("=" * 60)
    print("üîß Stock Performance Analyzer - Environment Setup")
    print("=" * 60)
    
    # Check if .env already exists
    if os.path.exists(".env"):
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if response != 'y':
            print("Setup cancelled.")
            return
        print()
    
    print("To use this application, you need a free API key from Alpha Vantage.")
    print("üì° Get your free API key here: https://www.alphavantage.co/support/#api-key")
    print()
    
    # Get API key from user
    while True:
        api_key = input("Enter your Alpha Vantage API key: ").strip()
        if api_key:
            break
        print("‚ùå API key cannot be empty. Please try again.")
    
    # Optional settings
    print("\nOptional settings (press Enter for defaults):")
    
    host = input("Host [0.0.0.0]: ").strip() or "0.0.0.0"
    port = input("Port [8000]: ").strip() or "8000"
    environment = input("Environment [development]: ").strip() or "development"
    
    # Create .env content
    env_content = f"""# Alpha Vantage API Configuration
API_KEY={api_key}

# Server Configuration
HOST={host}
PORT={port}

# Environment
ENVIRONMENT={environment}

# Generated by setup_env.py
"""
    
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        
        print("\n‚úÖ .env file created successfully!")
        print("üìÅ File location: .env")
        print("\nüìã Configuration:")
        print(f"   - API Key: {api_key[:8]}{'*' * (len(api_key) - 8)}")
        print(f"   - Host: {host}")
        print(f"   - Port: {port}")
        print(f"   - Environment: {environment}")
        
        print("\nüöÄ You can now run the application with:")
        print("   python run_app.py")
        print("\n   or manually:")
        print("   python main.py        (in one terminal)")
        print("   streamlit run streamlit_app.py  (in another terminal)")
        
    except Exception as e:
        print(f"\n‚ùå Failed to create .env file: {e}")
        sys.exit(1)

def validate_api_key(api_key):
    """Basic validation for API key format"""
    if len(api_key) < 10:
        return False, "API key seems too short"
    
    if not api_key.replace('_', '').replace('-', '').isalnum():
        return False, "API key contains invalid characters"
    
    return True, "API key format looks valid"

def test_env_file():
    """Test if .env file is properly configured"""
    print("üß™ Testing .env configuration...")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        api_key = os.getenv("API_KEY")
        if not api_key:
            print("‚ùå API_KEY not found in .env file")
            return False
        
        valid, message = validate_api_key(api_key)
        if valid:
            print(f"‚úÖ {message}")
            return True
        else:
            print(f"‚ö†Ô∏è  {message}")
            return False
            
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv not installed. Run: pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"‚ùå Error testing .env file: {e}")
        return False

def main():
    """Main function"""
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        # Test mode
        if os.path.exists(".env"):
            test_env_file()
        else:
            print("‚ùå .env file not found. Run without 'test' argument to create it.")
    else:
        # Setup mode
        create_env_file()
        
        # Test the created file
        if os.path.exists(".env"):
            print("\n" + "-" * 40)
            test_env_file()

if __name__ == "__main__":
    main() 